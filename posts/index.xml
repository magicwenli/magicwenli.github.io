<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Magical trees, take me home.</title><link>/posts/</link><description>Recent content in Posts on Magical trees, take me home.</description><generator>Hugo</generator><language>zh</language><lastBuildDate>Tue, 10 Sep 2024 03:46:06 +0000</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Buildroot 速查表</title><link>/posts/buildroot-cheetsheet/</link><pubDate>Wed, 04 Sep 2024 00:00:00 +0800</pubDate><guid>/posts/buildroot-cheetsheet/</guid><description>&lt;blockquote>
&lt;p>完整文档可以在&lt;a href="https://buildroot.org/downloads/manual/manual.html">官方网站&lt;/a>找到。&lt;/p>
&lt;/blockquote>
&lt;h2 id="基本命令">基本命令&lt;/h2>
&lt;p>&lt;a href="https://buildroot.org/downloads/manual/manual.html#make-tips">Make 提示&lt;/a>&lt;/p>
&lt;p>使用 &lt;code>make help&lt;/code> 获取所有可用目标的列表。&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">命令&lt;/th>
 &lt;th style="text-align: left">描述&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">make&lt;/td>
 &lt;td style="text-align: left">构建 rootfs&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">make xyz_defconfig&lt;/td>
 &lt;td style="text-align: left">选择配置文件&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">make menuconfig&lt;/td>
 &lt;td style="text-align: left">打开配置菜单&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">make savedefconfig&lt;/td>
 &lt;td style="text-align: left">将当前配置保存到 defconfig 文件中&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">make source&lt;/td>
 &lt;td style="text-align: left">下载包的源代码&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">make clean&lt;/td>
 &lt;td style="text-align: left">清理所有构建产品（包括构建目录、主机、暂存和目标树、镜像和工具链）&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">make distclean&lt;/td>
 &lt;td style="text-align: left">清理所有内容，包括配置&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="包管理">包管理&lt;/h3>
&lt;blockquote>
&lt;p>&lt;a href="https://buildroot.org/downloads/manual/manual.html#pkg-build-steps">特定包的 make 目标&lt;/a>&lt;/p></description></item><item><title>Yocto &amp; Bitbake 速查表</title><link>/posts/yocto-cheetsheet/</link><pubDate>Wed, 04 Sep 2024 00:00:00 +0800</pubDate><guid>/posts/yocto-cheetsheet/</guid><description>&lt;blockquote>
&lt;p>完整文档可以在&lt;a href="https://docs.yoctoproject.org/">Yocto 文档网站&lt;/a>找到。
参考自&lt;a href="https://github.com/shantanoo-desai/yoctoproject-cheatsheet">yoctoproject-cheatsheet&lt;/a>。&lt;/p>
&lt;/blockquote>
&lt;h2 id="cli-命令">Cli 命令&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">命令&lt;/th>
 &lt;th style="text-align: left">描述&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">todo&lt;/td>
 &lt;td style="text-align: left">todo&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="变量语法和操作">变量语法和操作&lt;/h2>
&lt;blockquote>
&lt;p>参考自&lt;a href="https://docs.yoctoproject.org/bitbake/2.4/bitbake-user-manual/bitbake-user-manual-metadata.html">Bitbake User Manual&lt;/a>&lt;/p></description></item><item><title>Linux Process 的内存布局</title><link>/posts/linux-memory-layout-of-process/</link><pubDate>Tue, 25 Jul 2023 22:17:00 +0800</pubDate><guid>/posts/linux-memory-layout-of-process/</guid><description>&lt;h2 id="内存布局">内存布局&lt;/h2>
&lt;p>一般而言，C程序通常由一下几个部分组成。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>正文段&lt;/p>
&lt;ul>
&lt;li>正文段是用于存储代码的，也称之为代码段。如果函数是可重入的，那么代码段是可以共享的。正文段通常都是只读的，以防止被更改。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>初始化数据段&lt;/p>
&lt;ul>
&lt;li>初始化数据段包含了程序中需要明确初始化的变量。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>未初始化数据段&lt;/p>
&lt;ul>
&lt;li>未初始化数据段也被称为bss段。这里的存放的数据是交由内核来完成初始化为0的操作。例如：函数外定义的数组，它会在程序执行之前被内核全部初始化为0。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>栈区&lt;/p>
&lt;ul>
&lt;li>自动变量以及每次函数调用时需要保存的信息都被保存在这个区域。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>堆区&lt;/p>
&lt;ul>
&lt;li>通常在堆区进行动态内存分配。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>对于Intel x86处理器上的Linux操作系统而言，典型的存储空间布局如下：&lt;/p>
&lt;p>&lt;img src="/img/process_memory_layout.png" alt="内存布局">&lt;/p>
&lt;h2 id="命令行参数和环境变量">命令行参数和环境变量&lt;/h2>
&lt;p>命令行参数是指从命令行执行程序的时候，给程序的参数。C语言总是从main函数执行的，它的命令行参数被ISO C和POSIX规定为如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> &lt;span style="color:#008b45">main&lt;/span>(&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> argc,&lt;span style="color:#00688b;font-weight:bold">char&lt;/span> *argv[]);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>main函数的第一个参数argc保存的是程序执行的时候，命令行输入的参数总个数。其中第0个参数就是被执行的程序名字。第二个参数argv是用来保存命令行参数的。ISO C和POSIX都要求argv[argc]是一个空指针。&lt;/p></description></item><item><title>MacOS 的 Emacs 风格键盘快捷键</title><link>/posts/emacs-style-keyboard-shortcut-of-macos/</link><pubDate>Sat, 07 May 2022 00:00:00 +0800</pubDate><guid>/posts/emacs-style-keyboard-shortcut-of-macos/</guid><description>&lt;blockquote>
&lt;p>译自： &lt;a href="https://jblevins.org/log/kbd">(Emacs) Keyboard Shortcuts for Editing Text Fields in OS X&lt;/a>&lt;/p>
&lt;p>by JASON BLEVINS (JULY 17, 2015)&lt;/p>
&lt;/blockquote>
&lt;p>众所周知，&lt;abbr class="abbr" title="操作系统">MacOS&lt;/abbr> 有一组键盘快捷键，其中常用方向键控制Web 表单、输入框、纯文本文档等文本字段的编辑。举个例子， &lt;kbd>⌘←&lt;/kbd>将光标移动到当前行的开头。&lt;/p>
&lt;p>尽管它们在官方的文档中有提及&lt;a href="https://support.apple.com/en-us/HT201236">(Mac 键盘快捷键)&lt;/a>，但似乎不太为人所知的是， &lt;abbr class="abbr">MacOS&lt;/abbr > 还原生支持某些 Emacs 键盘快捷键。 例如，要移动到当前行的开头或结尾，可以按 &lt;kbd>⌃A&lt;/kbd> 或 &lt;kbd>⌃E&lt;/kbd>。 要删除光标后当前行上的所有内容，请使用 &lt;kbd>⌃K&lt;/kbd>。 要调换光标左右两侧的字符的位置，请按 &lt;kbd>⌃T&lt;/kbd>。 要在当前行上居中视口，请按 &lt;kbd>⌃L&lt;/kbd>。 像这样的快捷用法比使用方向键更快，后者需要将手指从键盘的主行移开。&lt;/p>
&lt;p>下表比较了 Emacs 按键绑定与 &lt;abbr class="abbr">MacOS&lt;/abbr> 按键绑定（类似 Emacs 的子集）。 对于 &lt;abbr class="abbr">MacOS&lt;/abbr> 快捷键，我们使用常用符号来表示 Command &lt;kbd>⌘&lt;/kbd>、Shift &lt;kbd>⇧&lt;/kbd>、Option &lt;kbd>⌥&lt;/kbd>、Control &lt;kbd>⌃&lt;/kbd>、Caps Lock &lt;kbd>⇪&lt;/kbd>、Delete &lt;kbd>⌫&lt;/kbd> 和 Function &lt;kbd>Fn&lt;/kbd> 键，并且将所有字母用大写表示。&lt;/p></description></item><item><title>qBittorrent 的一些事儿</title><link>/posts/usage-of-qbittorrent/</link><pubDate>Fri, 22 Apr 2022 00:00:00 +0800</pubDate><guid>/posts/usage-of-qbittorrent/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>大学4年即将结束，回想这段时间。有时一个机缘巧合，我们就会被吸引并走进一个新的世界。PT就是我在大一期间认识到的，这种Freeeee的感觉太好了。后来组了自己的NAS，装入大容量硬盘，开启我的下载做种之路。&lt;/p>
&lt;p>有时会遇到种子掉线的问题，虽然出现的频率很低，但每次出现都让人困恼不已。具体情况是因为torrent下载工具和NAS不在同一个设备上，每当突然掉电后，恢复启动的torrent下载工具无法确定种子进度，于是种子进度干脆显示成0%。要想恢复做种进度，需要对所有种子重新进行散列检测。&lt;/p>
&lt;p>对于数以TB的文件，重新检测不仅需要大量的时间，而且会消耗大量的硬盘写入量，这对无论哪种硬盘都是一个灾难。&lt;/p>
&lt;p>之前开发过qBittorrent和uTorrent的备份工具，没有达到预期效果。&lt;/p>
&lt;p>今天看到了&lt;a href="https://tomorrow505.xyz/%E5%9F%BA%E4%BA%8Eqbittorrentapi%E5%AE%9E%E7%8E%B0%E6%89%B9%E9%87%8F%E5%8A%A0%E8%BD%BD%E7%A7%8D%E5%AD%90%E8%B7%B3%E6%A3%80/">这篇文章&lt;/a>，感觉很有参考意义。本文就是在此基础上做的一点修改。&lt;/p>
&lt;h2 id="qbittorrent-api">qbittorrent-api&lt;/h2>
&lt;p>&lt;a href="https://github.com/rmartin16/qbittorrent-api">qbittorrent-api&lt;/a> 是qBittorrent Web API的Python实现。&lt;a href="https://qbittorrent-api.readthedocs.io/en/latest/introduction.html">RTD&lt;/a>&lt;/p>
&lt;p>它支持qBittorrent v4.1.0+版本，基本实现了所有API。&lt;/p>
&lt;p>支持的版本：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">from&lt;/span> &lt;span style="color:#008b45;text-decoration:underline">qbittorrentapi&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">import&lt;/span> Version
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>versions = Version.supported_app_versions()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#658b00">print&lt;/span>(&lt;span style="color:#658b00">sorted&lt;/span>(versions))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22"># [&amp;#39;v4.1.0&amp;#39;, &amp;#39;v4.1.1&amp;#39;, &amp;#39;v4.1.2&amp;#39;, &amp;#39;v4.1.3&amp;#39;, &amp;#39;v4.1.4&amp;#39;, &amp;#39;v4.1.5&amp;#39;, &amp;#39;v4.1.6&amp;#39;, &amp;#39;v4.1.7&amp;#39;, &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22"># &amp;#39;v4.1.8&amp;#39;, &amp;#39;v4.1.9&amp;#39;, &amp;#39;v4.1.9.1&amp;#39;, &amp;#39;v4.2.0&amp;#39;, &amp;#39;v4.2.1&amp;#39;, &amp;#39;v4.2.2&amp;#39;, &amp;#39;v4.2.3&amp;#39;, &amp;#39;v4.2.4&amp;#39;, &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22"># &amp;#39;v4.2.5&amp;#39;, &amp;#39;v4.3.0&amp;#39;, &amp;#39;v4.3.0.1&amp;#39;, &amp;#39;v4.3.1&amp;#39;, &amp;#39;v4.3.2&amp;#39;, &amp;#39;v4.3.3&amp;#39;, &amp;#39;v4.3.4.1&amp;#39;, &amp;#39;v4.3.5&amp;#39;, &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22"># &amp;#39;v4.3.6&amp;#39;, &amp;#39;v4.3.7&amp;#39;, &amp;#39;v4.3.8&amp;#39;, &amp;#39;v4.3.9&amp;#39;, &amp;#39;v4.4.0&amp;#39;, &amp;#39;v4.4.1&amp;#39;, &amp;#39;v4.4.2&amp;#39;]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title>《远山的呼唤》只是未到伤心处</title><link>/posts/a-distant-cry-from-spring/</link><pubDate>Sat, 16 Apr 2022 00:00:00 +0800</pubDate><guid>/posts/a-distant-cry-from-spring/</guid><description>&lt;p>该片由山田洋次执导，倍赏千惠子、高仓健、吉冈秀隆等主演，于1980年3月15日出品。&lt;/p>
&lt;p>日本的北海道，差不多类似于国内的大西北。在电影拍摄的年代，这里仍然是一片苦寒之地。土地广袤，但产出贫乏，狂风骤雨的夏季，雪虐风饕的冬季，无不摧残着生活在这里的人们。&lt;/p>
&lt;p>女主人公风见民子既要独自支撑养牛场，还要抚养儿子武志。年轻时的她为了爱情，毅然断绝家里的联系，与一个即将去北海道开荒的人私奔。两人白手起家建立起这座农场，本来日子虽然苦，却还过得去。但几年前，丈夫撒手人寰，农场一下成了难以支撑的负担。她，勤劳、倔强、柔弱却坚强，默默承受所有的苦楚，却能用一颗善良的心教育孩子。&lt;/p>
&lt;p>表弟胜男带着新婚妻子佳代子来农场看望。饭桌上，民子开玩笑地说着表弟小时候的糗事，胜男说着表姐高中时多么年轻漂亮，气氛是轻松喜悦的。临别时，胜男笑着对表姐说：“祝你幸福”。但镜头随着汽车渐行渐远后，佳代子察觉到胜男异样的神情。眼泪湿润了胜男的脸庞，他感叹道：“表姐，过得真辛苦啊”。&lt;/p>
&lt;p>含蓄地表达，却刻画出了最动人的深情。内心深处最柔软的角落都被触动，在酸楚中一遍又一遍回味着最本初的真情。&lt;/p>
&lt;p>男主人公田岛耕作，结实肯干、沉默寡言。他用宽阔的肩膀为民子撑起了一片天，如同一只默默耕耘的黄牛一般，沉默，不求回报。他替民子照顾牲畜、教育武志要像男子汉一样勇敢。在武志心里，他慢慢地填补了父亲的缺失。潜移默化中，他的英武、潇洒使民子产生了一种暧昧的情愫。在他告知即将离开的那个夜晚，民子再也无法保持坚强。她卸下了自己勇敢无惧，将柔弱的一面暴露出来。是他给了民子久违的安全感，民子扑在他怀里，恳求不要离去。但他还是克制着自己的感情，还是沉默着，始终保持一段距离。&lt;/p>
&lt;p>之所以隐身于这个人烟稀少的小镇，勤勤恳恳的过着不求回报的生活，是因为一次冲动。彼时，他曾经的妻由于偿还不清贷款而自缢，在妻子的灵堂前他忍受不了债主对妻子的谩骂，冲动下铸成大错，自那以后就亡命天涯。但在这里，他重新找到了家人的感觉。但理性告诉他，他没有资格再享受这种快乐。&lt;/p>
&lt;p>“叔叔，你去哪儿啊？”武志追在警车后边跑边喊，他并不知道内情，只是牵挂这个像父亲一样的人。田岛挥了挥手，以歉意、困窘的眼神回应，然后进入了警车。&lt;/p>
&lt;p>镜头一转，又是一个冬天。风雪吹破农场窗户的塑料纸，农场的大门敞开着，一片破败萧条。&lt;/p>
&lt;p>火车上，两名警员押送着田岛前去服刑，此时正停在农场附近的火车站。出乎意料地，她找到了被判四年有期徒刑并正被押去服刑的他。两人似乎不知道要如何开口，虻田急中生智，以一种借喻的口吻和民子对话，完成了民子对田岛亲情和爱情的告白。&lt;/p>
&lt;blockquote>
&lt;p>虻田问道：太太，好久不见，听说您不养奶牛，到镇上去工作了。&lt;/p>
&lt;p>此时，民子望向耕作回答：对。&lt;/p>
&lt;p>虻田又问：听说您跟您儿子在等您丈夫回来，要等他好几年，这是真的吗？&lt;/p>
&lt;p>民子笃定温柔地点了点头，临座一直望着民子的耕作早已眼含泪光。&lt;/p>
&lt;p>虻田回复并又问：真了不起啊！生活上有没有困难呐？&lt;/p>
&lt;p>民子答：有虻田先生照顾。&lt;/p>
&lt;p>虻田：啊，那混蛋，是他呀，是他在照顾你们啦？&lt;/p>
&lt;p>民子又肯定地答到：是。&lt;/p>
&lt;p>虻田：那好啊，太好呐！&lt;/p>
&lt;/blockquote>
&lt;p>说完，虻田掩面而泣。田岛已是泪如雨下，他接过民子的手绢擦干眼泪、对着民子郑重地点头，接受了民子的告白。火车继续急驰，窗外一片白茫茫的大地。&lt;/p>
&lt;p>如此含蓄、简单、又温情的告白来自导演山田洋次对电影情节匠心的把握。没有刻意催泪，他只是在情节的自然发展中，把东方人对爱情的表白，用最生活、最朴实的仪式感呈现出来，是东方式的；是非常契合整个影片北海道牧场天高云远的基调的；是符合民子、耕作这样在日常劳作中情愫渐生、但又羞于言语直接表达的人设的。朝夕相处的日常已让耕作成为了自己生活的一部分，再含蓄的民子，在面对即将得到却又马上要失去的爱情的时候，她也必须要做点什么以告慰自己内心的呼唤。哪怕这意味着等待，但有等待就有希望。于是，在虻田的帮助下，她告白了耕作，这样的告白是属于普通人也许一生一次的伟大之举。&lt;/p></description></item><item><title>《希腊古瓮颂》浅析</title><link>/posts/impression-of-ode-on-a-grecian-urn/</link><pubDate>Fri, 14 Jan 2022 00:00:00 +0800</pubDate><guid>/posts/impression-of-ode-on-a-grecian-urn/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>希腊古瓮颂&lt;/strong>&lt;/p>
&lt;p>〔英国〕济慈
（屠岸 译）&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>你——“平静”的保持着童贞的新娘，&lt;br>
“沉默”和漫长的“时间”领养的少女，&lt;br>
山林的历史家，你如此美妙地叙讲&lt;br>
如花的故事，胜过我们的诗句：&lt;br>
绿叶镶边的传说在你的身上缠，&lt;br>
讲的可是神，或人，或神人在一道，&lt;br>
活跃在滕坡，或者阿卡狄谷地？&lt;br>
什么人，什么神？什么样姑娘不情愿？&lt;br>
怎样疯狂的追求？竭力的脱逃？&lt;br>
什么笛，铃鼓？怎样忘情的狂喜？&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>听见的乐曲是悦耳，听不见的旋律&lt;br>
更甜美；风笛呵，你该继续吹奏；&lt;br>
不是对耳朵，而是对心灵奏出&lt;br>
无声的乐曲，送上更多的温柔：&lt;br>
树下的美少年，你永远不停止歌唱，&lt;br>
那些树木也永远不可能凋枯；&lt;br>
大胆的情郎，你永远得不到一吻，&lt;br>
虽然接近了目标——你可别悲伤，&lt;br>
她永远不衰老，尽管你摘不到幸福，&lt;br>
你永远在爱着，她永远美丽动人!&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>啊，幸运的树枝!你永远不掉下&lt;br>
你的绿叶，永不向春光告别；&lt;br>
幸福的乐手，你永远不知道疲乏，&lt;br>
永远奏出永远新鲜的音乐；&lt;br>
幸福的爱情!更加幸福的爱情!&lt;br>
永远热烈，永远等待着享受，&lt;br>
永远喘息着，永远是青春年少，&lt;br>
这一切情态，都这样超凡入圣，&lt;br>
永远不会让心灵餍足，发愁，&lt;br>
不会让额头发烧，舌蔽唇焦。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>这些前来祭祀的都是什么人？&lt;br>
神秘的祭司，你的牛向上天哀唤，&lt;br>
让花环挂满在她那光柔的腰身，&lt;br>
你要牵她去哪一座青葱的祭坛？&lt;br>
这是哪一座小城，河边的，海边的，&lt;br>
还是靠山的，筑一座护卫的城砦——&lt;br>
居尼们倾城而出，赶清早去敬神？&lt;br>
小城呵，你的大街小巷将永远地&lt;br>
寂静无声，没有一个灵魂会回来&lt;br>
说明你何以从此变成了荒城。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>啊，雅典的形状!美的仪态!&lt;br>
身上雕满大理石少女和男人，&lt;br>
树林伸枝柯，脚下倒伏着草莱：&lt;br>
你呵，缄口的形体!你冷嘲如“永恒”&lt;br>
教我们超脱思虑。冷色的牧歌!&lt;br>
等老年摧毁了我们这一代，那时，&lt;br>
你将仍然是人类的朋友，&lt;br>
并且会见到另一些哀愁，你会这样说：&lt;br>
“美即是真，真即是美”——这就是&lt;br>
我们在地上所知道、该知道的一切。&lt;/p></description></item><item><title>Android 抓包以及 mitmproxy</title><link>/posts/android-emulator-packet-capture-and-everything/</link><pubDate>Fri, 26 Nov 2021 02:37:41 +0800</pubDate><guid>/posts/android-emulator-packet-capture-and-everything/</guid><description>&lt;h2 id="最佳实践">最佳实践&lt;/h2>
&lt;blockquote>
&lt;p>经过一段时间的研究，又有了新的看法。&lt;/p>
&lt;/blockquote>
&lt;p>准备以下两种工具：&lt;/p>
&lt;ul>
&lt;li>mitmproxy&lt;/li>
&lt;li>Android Emulator(MuMu, BlueStack &amp;hellip;)&lt;/li>
&lt;/ul>
&lt;h3 id="mitmproxy">mitmproxy&lt;/h3>
&lt;p>&lt;code>mitmproxy&lt;/code>最好使用&lt;a href="https://pypa.github.io/pipx/">pipx&lt;/a>安装。因为&lt;code>mitmproxy&lt;/code>运行在独立的&lt;code>venv&lt;/code>中，使用&lt;code>pipx&lt;/code>方便为&lt;code>mitmproxy&lt;/code>安装额外的python包。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>brew install pipx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pipx install mitmproxy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最好按照提示说明，使用&lt;code>pipx ensurepath&lt;/code>修改环境变量。&lt;/p>
&lt;p>这样我们就可以为&lt;code>mitmproxy&lt;/code>安装额外的python包了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>pipx inject mitmproxy pycryptodome &lt;span style="color:#228b22"># 安装 pycryptodome 包，用于AES解码&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>将浏览器代理设置到&lt;code>8080&lt;/code>端口，打开(mitm.it)[mitm.it]下载对应平台的证书。&lt;/p>
&lt;h3 id="android-emulator">Android Emulator&lt;/h3>
&lt;p>抓包之前有两个步骤：&lt;/p>
&lt;ol>
&lt;li>设置手动代理&lt;/li>
&lt;li>安装并信任自签名https证书&lt;/li>
&lt;/ol>
&lt;p>设置WiFi代理为主机&lt;code>8080&lt;/code>端口：&lt;/p>
&lt;p>&lt;img src="/img/Snipaste_2021-11-26_01-17-55.png" alt="Snipaste_2021-11-26_01-12-38">&lt;/p></description></item><item><title>R语言列表操作和连接MongoDB经验之谈</title><link>/posts/r-lang-useful-tricks/</link><pubDate>Wed, 10 Nov 2021 17:28:19 +0800</pubDate><guid>/posts/r-lang-useful-tricks/</guid><description>&lt;figure>&lt;img src="/img/RStudio.png"
 alt="RStudio">&lt;figcaption>
 &lt;p>RStudio&lt;/p>
 &lt;/figcaption>
&lt;/figure>

&lt;h2 id="r语言的好处">R语言的好处&lt;/h2>
&lt;p>在做Teamfight Tactics分析时，我先通过Riot&amp;rsquo;s API收集到了许多场次的对局数据。如何将这些复杂的数据转换成可以直接使用的数据，方便进行分析呢？&lt;/p>
&lt;p>之前一直用的是Python，思路是通过pymongo包连接MongoDB提取数据，再通过python内建函数进行转换和分析。这样需要不停使用&lt;code>Table[&amp;quot;sub&amp;quot;]['subsub']&lt;/code>这样的格式取得内部结构。这部分内容没有代码提示，需要程序员自行记忆每个&lt;code>Key&lt;/code>对应的结构，不仅麻烦，而且容易出错。可以预计分析数据的时候会用到大量循环，而python的效率让人缺乏信心。再加上后续还有画图步骤，而&lt;code>matplotlib&lt;/code>是一个非常麻烦的东西，我有点害怕。&lt;/p>
&lt;p>也考虑过使用&lt;code>Matlab&lt;/code>，它的好处是不少循环可以转为向量化运算，速度会快不少，而且画图容易。&lt;code>Matlab&lt;/code>的附加功能里有一个&lt;code>Database Toolbox Interface for MongoDB&lt;/code>。我甚至已经使用它进行了一段时间分析了，但后面发现默认生成的&lt;code>.mat&lt;/code>格式转换为其他格式比较困难。而且运行速度也不是很理想，消耗资源很大，400MB的数据量在运算时常常卡死我的电脑。也可能是因为我不常使用它，所有代码本身编写的也不够好。&lt;/p>
&lt;p>最后终于接触到了R语言，这真是个好工具。配合RStudio，顺手又高效。它解决了上面的所有问题，而且内建和社区的函数和包为分析过程提供了很大帮助，为我节省了很多时间。它的一些用法和其他语言显得有些奇怪，理解和熟悉需要一些时间，但R语言的学习绝对物超所值。&lt;/p>
&lt;p>李东风老师的开源R语言教程很好，推荐一下：&lt;a href="https://www.math.pku.edu.cn/teachers/lidf/docs/Rbook/html/_Rbook/index.html">https://www.math.pku.edu.cn/teachers/lidf/docs/Rbook/html/_Rbook/index.html&lt;/a>&lt;/p>
&lt;h2 id="r语言的数据类型">R语言的数据类型&lt;/h2>
&lt;h3 id="向量">向量&lt;/h3>
&lt;p>向量是将若干个基础类型&lt;strong>相同&lt;/strong>的值存储在一起，各个元素可以按序号访问。需要注意的是，R语言各种类型的数据结构的下标都是从1开始的。例如&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-r" data-lang="r">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22"># 数值型&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>marks &amp;lt;- &lt;span style="color:#008b45">c&lt;/span>(&lt;span style="color:#b452cd">10&lt;/span>, &lt;span style="color:#b452cd">6&lt;/span>, &lt;span style="color:#b452cd">4&lt;/span>, &lt;span style="color:#b452cd">7&lt;/span>, &lt;span style="color:#b452cd">8&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>x &amp;lt;- &lt;span style="color:#008b45">c&lt;/span>(&lt;span style="color:#b452cd">1&lt;/span>:&lt;span style="color:#b452cd">3&lt;/span>, &lt;span style="color:#b452cd">10&lt;/span>:&lt;span style="color:#b452cd">13&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22"># 逻辑型&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008b45">c&lt;/span>(&lt;span style="color:#b452cd">1&lt;/span>, &lt;span style="color:#b452cd">3&lt;/span>, &lt;span style="color:#b452cd">5&lt;/span>) &amp;gt; &lt;span style="color:#b452cd">2&lt;/span> &lt;span style="color:#228b22"># [1] FALSE TRUE TRUE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22"># 字符型&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s1 &amp;lt;- &lt;span style="color:#008b45">c&lt;/span>(&lt;span style="color:#cd5555">&amp;#39;abc&amp;#39;&lt;/span>, &lt;span style="color:#cd5555">&amp;#39;&amp;#39;&lt;/span>, &lt;span style="color:#cd5555">&amp;#39;a cat&amp;#39;&lt;/span>, &lt;span style="color:#8b008b;font-weight:bold">NA&lt;/span>, &lt;span style="color:#cd5555">&amp;#39;李明&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title>通过Gitbook将Markdown电子书转换为PDF格式</title><link>/posts/convert-gitbook-to-pdf/</link><pubDate>Wed, 10 Nov 2021 17:18:22 +0800</pubDate><guid>/posts/convert-gitbook-to-pdf/</guid><description>&lt;h2 id="找到一本电子书">找到一本电子书&lt;/h2>
&lt;p>以《&lt;a href="https://github.com/unknwon/the-way-to-go_ZH_CN">the-way-to-go_ZH_CN&lt;/a>》为例，先&lt;code>clone&lt;/code>下来。&lt;/p>
&lt;h2 id="预处理">预处理&lt;/h2>
&lt;p>GitBook使用简单的目录结构，通过 &lt;code>SUMMARY.md&lt;/code> 目录文件来确定哪些文件被转换。原书目录是&lt;code>TOC.md&lt;/code>，因此将&lt;code>TOC.md&lt;/code>改名为&lt;code>SUMMARY.md&lt;/code>。&lt;/p>
&lt;p>原书的图片链接都带上了&lt;code>?raw=true&lt;/code>参数，导致转换后的PDF文件里图片无法正确显示，需要全部删除&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>grep -rl &lt;span style="color:#cd5555">&amp;#34;?raw=true&amp;#34;&lt;/span> ./ | xargs sed -i &lt;span style="color:#cd5555">&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#cd5555">&amp;#39;s/?raw=true//g&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="开始转换">开始转换&lt;/h2>
&lt;p>安装&lt;a href="https://calibre-ebook.com">calibre&lt;/a>，主要是需要&lt;code>ebook-converter&lt;/code>这个命令行工具&lt;/p>
&lt;ol>
&lt;li>创建一个符号连接&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo ln -s /Applications/calibre.app/Contents/MacOS/ebook-convert /usr/local/bin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>/usr/local/bin&lt;/code>可以是&lt;code>$PATH$&lt;/code>中的任何文件夹&lt;/p>
&lt;ol start="2">
&lt;li>安装&lt;code>gitbook-cli&lt;/code>，这时会自动编译安装&lt;code>gitbook&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npm install gitbook-cli -g
&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title>Hello World</title><link>/posts/hello/</link><pubDate>Tue, 09 Nov 2021 17:18:22 +0800</pubDate><guid>/posts/hello/</guid><description>&lt;p>辗转反复多次，最后终于意识到比写博客有意思的是折腾博客。&lt;/p>
&lt;blockquote>
&lt;p>下次记得留下一些被打败的凹痕，以作纪念。 - 蕾欧娜&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>console.log(&lt;span style="color:#cd5555">&amp;#34;Hello World&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>