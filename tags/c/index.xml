<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C on Magical trees, take me home.</title><link>/tags/c/</link><description>Recent content in C on Magical trees, take me home.</description><generator>Hugo</generator><language>zh</language><lastBuildDate>Tue, 25 Jul 2023 14:41:26 +0000</lastBuildDate><atom:link href="/tags/c/index.xml" rel="self" type="application/rss+xml"/><item><title>Linux Process 的内存布局</title><link>/posts/linux-memory-layout-of-process/</link><pubDate>Tue, 25 Jul 2023 22:17:00 +0800</pubDate><guid>/posts/linux-memory-layout-of-process/</guid><description>&lt;h2 id="内存布局">内存布局&lt;/h2>
&lt;p>一般而言，C程序通常由一下几个部分组成。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>正文段&lt;/p>
&lt;ul>
&lt;li>正文段是用于存储代码的，也称之为代码段。如果函数是可重入的，那么代码段是可以共享的。正文段通常都是只读的，以防止被更改。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>初始化数据段&lt;/p>
&lt;ul>
&lt;li>初始化数据段包含了程序中需要明确初始化的变量。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>未初始化数据段&lt;/p>
&lt;ul>
&lt;li>未初始化数据段也被称为bss段。这里的存放的数据是交由内核来完成初始化为0的操作。例如：函数外定义的数组，它会在程序执行之前被内核全部初始化为0。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>栈区&lt;/p>
&lt;ul>
&lt;li>自动变量以及每次函数调用时需要保存的信息都被保存在这个区域。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>堆区&lt;/p>
&lt;ul>
&lt;li>通常在堆区进行动态内存分配。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>对于Intel x86处理器上的Linux操作系统而言，典型的存储空间布局如下：&lt;/p>
&lt;p>&lt;img src="/img/process_memory_layout.png" alt="内存布局">&lt;/p>
&lt;h2 id="命令行参数和环境变量">命令行参数和环境变量&lt;/h2>
&lt;p>命令行参数是指从命令行执行程序的时候，给程序的参数。C语言总是从main函数执行的，它的命令行参数被ISO C和POSIX规定为如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> &lt;span style="color:#008b45">main&lt;/span>(&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> argc,&lt;span style="color:#00688b;font-weight:bold">char&lt;/span> *argv[]);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>main函数的第一个参数argc保存的是程序执行的时候，命令行输入的参数总个数。其中第0个参数就是被执行的程序名字。第二个参数argv是用来保存命令行参数的。ISO C和POSIX都要求argv[argc]是一个空指针。&lt;/p>
&lt;p>一个简单的实例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1e889b">#include&lt;/span>&lt;span style="color:#1e889b">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#1e889b">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1e889b">&lt;/span>&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> &lt;span style="color:#008b45">main&lt;/span>(&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> argc,&lt;span style="color:#00688b;font-weight:bold">char&lt;/span> *argv[])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008b45">printf&lt;/span>(&lt;span style="color:#cd5555">&amp;#34;程序执行名：%s&lt;/span>&lt;span style="color:#cd5555">\n&lt;/span>&lt;span style="color:#cd5555">&amp;#34;&lt;/span>,argv[&lt;span style="color:#b452cd">0&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008b45">printf&lt;/span>(&lt;span style="color:#cd5555">&amp;#34;参数列表：&lt;/span>&lt;span style="color:#cd5555">\n&lt;/span>&lt;span style="color:#cd5555">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> (&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> i = &lt;span style="color:#b452cd">1&lt;/span>; i &amp;lt; argc; i++)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008b45">printf&lt;/span>(&lt;span style="color:#cd5555">&amp;#34;%s&lt;/span>&lt;span style="color:#cd5555">\n&lt;/span>&lt;span style="color:#cd5555">&amp;#34;&lt;/span>,argv[i]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#b452cd">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行结果如下：
&lt;img src="/img/argc_argv_example.jpg" alt="example">&lt;/p>
&lt;p>现在，POSIX规定了不使用第三个参数，通常使用getenv函数和putenv函数来访问环境变量。&lt;/p>
&lt;p>每次程序都有一张环境表，当我们需要查看整个环境的时候，可以使用全局变量environ。它包含了该指针数字的地址。&lt;/p>
&lt;p>&lt;code>extern char **environ;&lt;/code>&lt;/p>
&lt;p>我们来写个程序打印一下全部的环境变量。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1e889b">#include&lt;/span>&lt;span style="color:#1e889b">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#1e889b">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1e889b">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">extern&lt;/span> &lt;span style="color:#00688b;font-weight:bold">char&lt;/span> **environ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> &lt;span style="color:#008b45">main&lt;/span>(&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> argc,&lt;span style="color:#00688b;font-weight:bold">char&lt;/span> *argv[])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> (&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> i = &lt;span style="color:#b452cd">0&lt;/span>; &lt;span style="color:#658b00">NULL&lt;/span> != environ[i]; i++)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008b45">printf&lt;/span>(&lt;span style="color:#cd5555">&amp;#34;%s&lt;/span>&lt;span style="color:#cd5555">\n&lt;/span>&lt;span style="color:#cd5555">&amp;#34;&lt;/span>,environ[i]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#b452cd">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行以后的结果如下：
&lt;img src="/img/environ_example.jpg" alt="example">&lt;/p></description></item></channel></rss>